package echo.api;

import java.io.FileInputStream;
import java.io.IOException;
import java.util.UUID;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.Properties;

/**
 * MicrosoftSpeech class uses the Microsoft Cognitive Services Bing Speech API 
 * to convert a sound byte array to a string.
 * 
 * @author 640034510
 * @author 650033777
 * @author 620007467
 * @author David Wakeling
 * 
 * @see http://www.microsoft.com/cognitive-services/en-us/speech-api/Cognitive_Speech_API
 */
public class MicrosoftSpeech implements SpeechToText {
    final static String LANG  = "en-US";    
    final String BINGSPEECHKEY1;
    final String BINGSPEECHKEY2;
    final String BINGSPEECHAPPID;
    final static String METHOD = "POST";

    
    /**
     * No argument constructor for the MicrosoftSpeech Class
     * This method fetches the key from the properties file to use with the API
     * 
     * @throws KeyException if the key is missing from the configuration file
     *                      or the properties file is missing
     * @author 650033777
     */
    public MicrosoftSpeech() throws KeyException {
        Properties properties = new Properties();
        
        try {
            properties.load(new FileInputStream("./res/config.properties"));
        } catch (IOException e) {
            throw new KeyException("Properties file couldn't be opened");
        }
        
        BINGSPEECHKEY1 = properties.getProperty("BINGSPEECHKEY1", null);
        if(BINGSPEECHKEY1 == null) {
            throw new KeyException("Properties file does not contain key: BINGSPEECHKEY1");
        }
        
        BINGSPEECHKEY2 = properties.getProperty("BINGSPEECHKEY2", null);
        if(BINGSPEECHKEY2 == null) {
            throw new KeyException("Properties file does not contain key: BINGSPEECHKEY2");
        }
        
        BINGSPEECHAPPID = properties.getProperty("BINGSPEECHAPPID", null);
        if(BINGSPEECHAPPID == null) {
            throw new KeyException("Properties file does not contain key: BINGSPEECHAPPID");
        }
    }
    
    /**
     * renewAccessToken method provides a new token which is generated by the 
     * Microsoft Cognitive Services API
     * 
     * @param apiKey            Microsoft Cognitive Services API Key 
     * @return                  JSON Web Token for Microsoft Cognitive Services API
     * @throws AnswerException  if an error occurs somewhere when accessing the 
     *                          Microsoft Cognitive Services API
     * 
     * @author David Wakeling
     * @author 620007467
     */
    protected static String renewAccessToken(String apiKey)
        throws AnswerException {
        final String url = 
                "https://api.cognitive.microsoft.com/sts/v1.0/issueToken";
        final byte[] body = {};
        final String[][] headers =
        {
            {"Ocp-Apim-Subscription-Key", apiKey},
            {"Content-Length"           , String.valueOf( body.length )}
        };
        byte[] response = HttpConnect.httpConnect(METHOD, url, headers, body);
        
        if(response == null) {
            throw new AnswerException("Response from Microsoft is empty");
        }
        
        return new String(response);
    }
    
    /**
     * recogniseSpeech method posts to the Microsoft Cognitive Services API to 
     * convert the speech stream to a JSON response.
     * @param token             JSON Web Token
     * @param body              Stream of speech to convert
     * @throws AnswerException  if an error occurs somewhere when accessing the 
     *                          Microsoft Cognitive Services API
     * @return JSON Response
     * 
     */
    protected String recogniseSpeech(String token, byte[] body)
        throws AnswerException {
        final String url = 
                (
                    "https://speech.platform.bing.com/recognize"
                    + "?" + "version"    + "=" + "3.0"
                    + "&" + "format"     + "=" + "json"
                    + "&" + "device.os"  + "=" + "wp7"
                    + "&" + "scenarios"  + "=" + "smd"
                    + "&" + "locale"     + "=" + LANG
                    + "&" + "appid"      + "=" 
                        + BINGSPEECHAPPID
                    + "&" + "instanceid" + "=" + UUID.randomUUID().toString() 
                    + "&" + "requestid"  + "=" + UUID.randomUUID().toString()                    
                );
        final String[][] headers = 
        { 
            {"Content-Type"   , "audio/wav; codec=\"audio/pcm\"; samplerate=16000"},
            {"Content-Length" , String.valueOf( body.length )},
            {"Authorization"  , "Bearer " + token}
        };
        
        byte[] response = HttpConnect.httpConnect(METHOD, url, headers, body);
        
        if(response == null) {
            throw new AnswerException("Response from Microsoft is empty");
        }
        
        return new String(response);
    }

    /**
     * getText method takes a JSON response and returns the raw text reply
     * 
     * @param response  JSON response from the server
     * @return reply    the raw text reply
     * 
     * @author 650033777
     */
    static String getText(String response) {
        String pattern = "\"lexical\":\"(.*?)\"";
        Pattern r = Pattern.compile(pattern);
        Matcher m = r.matcher(response);
        
        if(m.find()) {
           return m.group(1);
        }
        
        return null;
    }
    
    /**
     * convertSpeech method takes a Byte Array and converts it to a JSON string
     * 
     * @param speech           Words to be converted to text
     * @return reply
     * @throws AnswerException If the speech could not be converted
     * 
     * @author 650033777
     */
    @Override
    public String convertSpeech(byte[] speech) throws AnswerException {
        final String token = renewAccessToken(BINGSPEECHKEY1);
        final String response = recogniseSpeech(token,speech); 
        
        if(response == null) {
            throw new AnswerException("Response is null");
        }
       
        String text = getText(response);
        
        if(text == null) {
            throw new AnswerException("Couldn't parse JSON response");
        }
        
        return text;
    }
}

